<configuration>
	<!-- 변수 지정 -->
    <!-- <property name="LOG_DIR" value="D:/logs" /> -->
    <property name="LOG_DIR" value="/data/logs" />
    <property name="LOG_PATH_NAME" value="${LOG_DIR}/SGUIDE.log" />
    
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH_NAME}</file>
		<!-- 일자별로 로그파일 적용하기 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH_NAME}.%d{yyyyMMdd}</fileNamePattern>
			<maxFileSize>100MB</maxFileSize>
        	<maxHistory>60</maxHistory>
        	<totalSizeCap>10GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%-5p] [%F]%M\(%L\) : %m%n</pattern>
		</encoder>
	</appender>

	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
	       <!-- encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
	       <encoder>
	               <pattern>
	               		<!--  -->
	               		%d{HH:mm:ss} %-5level %logger{26}:%L - %msg%n
	               </pattern>
	       </encoder>
	       
	       <!-- myBatis 에서 주석에 'NOT_SQL_LOG'를 넣고 로그에서는 제외한다. -->
            <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
                <evaluator>
                    <expression>return message.contains("NOT_SQL_LOG");</expression>
                </evaluator>
                <OnMismatch>NEUTRAL</OnMismatch>
                <OnMatch>DENY</OnMatch>
            </filter>
	</appender>
	
	<!-- Application Loggers
	<logger name="com.xxx.yyy">
	       <level value="debug" />
	</logger>
	 -->
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
	       <level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
	       <level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
	       <level value="info" />
	</logger>
	
	<logger name="org.springframework.web">
	       <level value="info" />
	</logger>
	
	<!-- 관련 정보 http://magefister.egloos.com/2053938 -->
	<logger name="java.sql">
	  <level value="error"/>
	  <appender-ref ref="STDOUT" />
	  <appender-ref ref="FILE" />
	</logger>
	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
	<logger name="jdbc.sqlonly" additivity="false">
	    <level value="info"/>
	    <appender-ref ref="STDOUT" />
	    <appender-ref ref="FILE" />
	</logger>
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
	<logger name="jdbc.sqltiming">
	    <level value="error"/>
	    <appender-ref ref="STDOUT" />
	    <appender-ref ref="FILE" />
	</logger>
	<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
	<logger name="jdbc.audit">
	    <level value="error"/>
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
	</logger>
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
	<logger name="jdbc.resultset">
		<level value="error"/>
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
	</logger>
	
	<logger name="jdbc.connection">
		<level value="error"/>
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
	</logger>
	
    <logger name="java.sql" level="error" additivity="false">
        <appender-ref ref="FILE" />
    </logger>
    <logger name="java.sql.connection" level="error" additivity="false">
         <appender-ref ref="FILE" />
	</logger>
	
	<!-- Root Logger -->
	<root level="info">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
	</root>
</configuration>